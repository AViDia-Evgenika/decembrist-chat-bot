name: Build and Push Docker Image

on:
  push:
    branches:
      - release

env:
  SERVICE_NAME: chat-bot  # ИЗМЕНИТЕ НА ИМЯ ВАШЕГО СЕРВИСА
  NAMESPACE: chat-bot     # ИЗМЕНИТЕ НА ВАШ NAMESPACE

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_HOST }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set datetime and image
        id: vars
        run: |
          DATETIME=$(date +'%Y%m%d-%H%M%S')
          SHORT_SHA=${GITHUB_SHA::8}
          IMAGE_TAG="${SERVICE_NAME}:${DATETIME}-${SHORT_SHA}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated image tag: $IMAGE_TAG"

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.REGISTRY_HOST }}/${{ steps.vars.outputs.image_tag }}
            ${{ secrets.REGISTRY_HOST }}/${{ env.SERVICE_NAME }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes access
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify access
        run: |
          echo "Проверяем доступ к namespace ${{ env.NAMESPACE }}"
          kubectl auth can-i patch deployments -n ${{ env.NAMESPACE }}
          kubectl get deployments -n ${{ env.NAMESPACE }}

      - name: Get current deployment revision
        id: get-old-rev
        run: |
          rev=$(kubectl get deployment ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} \
            -o jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}' 2>/dev/null || echo "")
          echo "old_rev=$rev" >> $GITHUB_OUTPUT

      - name: Deploy new image
        run: |
          kubectl set image deployment/${{ env.SERVICE_NAME }} \
            ${{ env.SERVICE_NAME }}=${{ secrets.REGISTRY_HOST }}/${{ steps.vars.outputs.image_tag }} \
            -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Rollback if failed
        if: failure()
        run: |
          if [ -z "${{ steps.get-old-rev.outputs.old_rev }}" ]; then
            echo "ERROR: Cannot rollback - no previous revision found"
            echo "This might be the first deployment"
            exit 1
          fi
          echo "Rolling back to revision ${{ steps.get-old-rev.outputs.old_rev }}"
          kubectl rollout undo deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} \
            --to-revision=${{ steps.get-old-rev.outputs.old_rev }}
          kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s
          echo "ERROR: Deployment failed, rolled back to revision ${{ steps.get-old-rev.outputs.old_rev }}"
          exit 1

      - name: Deployment success
        run: |
          echo "🎉 Deployment successful!"
          kubectl get deployment ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
          echo "New image: ${{ secrets.REGISTRY_HOST }}/${{ steps.vars.outputs.image_tag }}"
